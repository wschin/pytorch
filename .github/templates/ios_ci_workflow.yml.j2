{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/ios_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
  pull_request:
    types: [opened, synchronize, reopened, !{{ ciflow_config.trigger_action }}]

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
  workflow_dispatch:

# For setup-miniconda, see https://github.com/conda-incubator/setup-miniconda/issues/179
defaults:
  run:
    shell: bash -x -e -l {0}
env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  IN_CI: 1
  IS_GHA: 1
!{{ common.set_xcode_version(xcode_version) }}

jobs:
{% block build +%}
  build:
    runs-on: macos-10.15
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-build
      IOS_CERT_KEY_2022: ${{ secrets.IOS_CERT_KEY_2022 }}
      IOS_SIGN_KEY_2022: ${{ secrets.IOS_SIGN_KEY_2022 }}
      IS_PROBOT_TRIGGER_EVENT: ${{ (github.event.action == '!{{ ciflow_config.trigger_action }}') && (github.event.assigneed.login == '!{{ ciflow_config.trigger_actor }}') }}
      LABEL_CONDITIONS: ${{ !{{ ciflow_config.label_conditions }} }}
      PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
    if: !{{ ciflow_config.root_job_condition }}
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      !{{ common.checkout_pytorch("recursive") }}
      !{{ common.setup_miniconda("3.8") }}
      - name: Install ios / conda Dependencies
        run: |
          # Install dependencies
          brew install libtool
          conda install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi requests typing_extensions --yes
      - name: Run Fastlane
        shell: bash -e {0}
        run: |
          set -x
          cd ios/TestApp
          # install fastlane
          sudo gem install bundler && bundle install
          # install certificates
          echo "${IOS_CERT_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o Certificates.p12
          rm cert.txt
          bundle exec fastlane install_root_cert
          bundle exec fastlane install_dev_cert
          # install the provisioning profile
          PROFILE=PyTorch_CI_2022.mobileprovision
          PROVISIONING_PROFILES=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -pv "${PROVISIONING_PROFILES}"
          cd "${PROVISIONING_PROFILES}"
          echo "${IOS_SIGN_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o ${PROFILE}
          rm cert.txt
      - name: Build
        run: |
          export TCLLIBPATH="/usr/local/lib"
          python -VV
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname "$(which conda)")/../"}
          scripts/build_ios.sh
{% endblock +%}

!{{ common.concurrency(build_environment) }}
